/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "Heyzap.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*HeyzapRegister_t)(HeyzapCallback cbid, s3eCallback fn, void* userData);
typedef  s3eResult(*HeyzapUnRegister_t)(HeyzapCallback cbid, s3eCallback fn);
typedef       void(*start_t)(const char* pubId);
typedef       void(*fetchInterstitial_t)(const char* tag);
typedef       void(*showInterstitial_t)(const char* tag);
typedef       void(*fetchVideo_t)(const char* tag);
typedef       void(*showVideo_t)(const char* tag);
typedef       void(*fetchRewarded_t)(const char* tag);
typedef       void(*showRewarded_t)(const char* tag);
typedef       void(*startTestActivity_t)();

/**
 * struct that gets filled in by HeyzapRegister
 */
typedef struct HeyzapFuncs
{
    HeyzapRegister_t m_HeyzapRegister;
    HeyzapUnRegister_t m_HeyzapUnRegister;
    start_t m_start;
    fetchInterstitial_t m_fetchInterstitial;
    showInterstitial_t m_showInterstitial;
    fetchVideo_t m_fetchVideo;
    showVideo_t m_showVideo;
    fetchRewarded_t m_fetchRewarded;
    showRewarded_t m_showRewarded;
    startTestActivity_t m_startTestActivity;
} HeyzapFuncs;

static HeyzapFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x1df9ed6, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: Heyzap");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x1df9ed6, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool HeyzapAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult HeyzapRegister(HeyzapCallback cbid, s3eCallback fn, void* userData)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[0] func: HeyzapRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_HeyzapRegister(cbid, fn, userData);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult HeyzapUnRegister(HeyzapCallback cbid, s3eCallback fn)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[1] func: HeyzapUnRegister"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_HeyzapUnRegister(cbid, fn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

void start(const char* pubId)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[2] func: start"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_start(pubId);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void fetchInterstitial(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[3] func: fetchInterstitial"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fetchInterstitial(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void showInterstitial(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[4] func: showInterstitial"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_showInterstitial(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void fetchVideo(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[5] func: fetchVideo"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fetchVideo(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void showVideo(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[6] func: showVideo"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_showVideo(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void fetchRewarded(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[7] func: fetchRewarded"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_fetchRewarded(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void showRewarded(const char* tag)
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[8] func: showRewarded"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_showRewarded(tag);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}

void startTestActivity()
{
    IwTrace(HEYZAP_VERBOSE, ("calling Heyzap[9] func: startTestActivity"));

    if (!_extLoad())
        return;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    g_Ext.m_startTestActivity();

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return;
}
